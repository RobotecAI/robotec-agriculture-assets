/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluateSurface function in this file without making it the final EvaluateSurface
// used in your shader. Simply #define EvaluateSurface to your custom definition before including this file
//
#ifndef EvaluateSurface
#define EvaluateSurface EvaluateSurface_spraying
#endif

#include <Atom/Features/PBR/LightingOptions.azsli>
#include <Atom/Features/MatrixUtility.azsli>
#include <Atom/RPI/TangentSpace.azsli>

Surface EvaluateSurface_spraying(
    VsOutput IN,
    float3 positionWS,
    real3 normalWS,
    real3 tangents[UvSetCount],
    real3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace,
    bool isDisplacementClipped)
{
    const float3 bitangent = cross((float3)IN.normal, (float3)IN.tangent);
    const float3 O3DE_MC_POSITION = (float3)IN.position;
    const float3 O3DE_MC_NORMAL = (float3)IN.normal;
    const float3 O3DE_MC_TANGENT = (float3)IN.tangent;
    const float3 O3DE_MC_BITANGENT = (float3)bitangent;
    const float3 O3DE_MC_POSITION_WS = positionWS;
    const float3 O3DE_MC_NORMAL_WS = normalWS;
    const float3 O3DE_MC_TANGENT_WS = tangents[0];
    const float3 O3DE_MC_BITANGENT_WS = bitangents[0];
    #define O3DE_MC_UV(index) uvs[clamp(index, 0, UvSetCount-1)];

    // m_placeHolder keeps MaterialSrg from being compiled out when iterating on graphs
    const bool placeHolder = MaterialSrg::m_placeHolder;

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inNormal, inBaseColor, inMetallic, inRoughness, inSpecularF0Factor, inEmissive, inAlpha, inOpacityFactor, inDiffuseAmbientOcclusion, inSpecularOcclusion, inClearCoatFactor, inClearCoatRoughness, inClearCoatNormal, 
float node17_time_outTime = SceneSrg::m_time;
float node36_float_input_outValue = MaterialSrg::node36_float_input_inValue;
float node25_float_input_outValue = MaterialSrg::node25_float_input_inValue;
float node32_float_input_outValue = MaterialSrg::node32_float_input_inValue;
float node33_float_input_outValue = MaterialSrg::node33_float_input_inValue;
uint node21_uv_inIndex = 0;
float2 node21_uv_outUV = O3DE_MC_UV(node21_uv_inIndex);
float node21_uv_outU = node21_uv_outUV.x;
float node21_uv_outV = node21_uv_outUV.y;
float node24_multiply_inValue1 = node17_time_outTime;
float node24_multiply_inValue2 = node25_float_input_outValue;
float node24_multiply_outValue = node24_multiply_inValue1 * node24_multiply_inValue2;
float node23_add_inValue1 = node21_uv_outV;
float node23_add_inValue2 = node24_multiply_outValue;
float node23_add_outValue = node23_add_inValue1 + node23_add_inValue2;
float node20_float2_from_values_inX = node21_uv_outU;
float node20_float2_from_values_inY = node23_add_outValue;
float2 node20_float2_from_values_outValue = {(float)node20_float2_from_values_inX, (float)node20_float2_from_values_inY};
float2 node28_sample_texture_2d_inUV = node20_float2_from_values_outValue;
float4 node28_sample_texture_2d_outColor = MaterialSrg::node28_sample_texture_2d_inValue.Sample(MaterialSrg::node28_sample_texture_2d_inSampler, (float2)node28_sample_texture_2d_inUV);
float2 node22_sample_texture_2d_inUV = node20_float2_from_values_outValue;
float4 node22_sample_texture_2d_outColor = MaterialSrg::node22_sample_texture_2d_inValue.Sample(MaterialSrg::node22_sample_texture_2d_inSampler, (float2)node22_sample_texture_2d_inUV);
float node22_sample_texture_2d_outA = node22_sample_texture_2d_outColor.a;
float node31_multiply_inValue1 = node32_float_input_outValue;
float node31_multiply_inValue2 = node22_sample_texture_2d_outA;
float node31_multiply_outValue = node31_multiply_inValue1 * node31_multiply_inValue2;
float node35_multiply_inValue1 = node22_sample_texture_2d_outA;
float node35_multiply_inValue2 = node33_float_input_outValue;
float node35_multiply_outValue = node35_multiply_inValue1 * node35_multiply_inValue2;
float node37_multiply_inValue1 = node36_float_input_outValue;
float node37_multiply_inValue2 = node35_multiply_outValue;
float node37_multiply_outValue = node37_multiply_inValue1 * node37_multiply_inValue2;
float3 inNormal = (float3)node28_sample_texture_2d_outColor;
float3 inBaseColor = (float3)node22_sample_texture_2d_outColor;
float inMetallic = node31_multiply_outValue;
float inSpecularF0Factor = 0;
float inRoughness = 0;
float3 inEmissive = node37_multiply_outValue;
float inAlpha = node35_multiply_outValue;
float inOpacityFactor = 0.6;
float inDiffuseAmbientOcclusion = 1;
float inSpecularOcclusion = 1;
float inClearCoatFactor = 0;
float inClearCoatRoughness = 0;
float3 inClearCoatNormal = {0, 0, 0};
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_UV

    CheckClipping((real)inAlpha, (real)inOpacityFactor);

    Surface surface;
    surface.position = positionWS;
    surface.vertexNormal = normalWS;
    surface.normal = normalize(o_normal_override_enabled ? GetWorldSpaceNormal((real2)inNormal, normalWS, tangents[0], bitangents[0]) : normalWS);
    surface.roughnessLinear = inRoughness;
    surface.SetAlbedoAndSpecularF0(inBaseColor, inSpecularF0Factor, inMetallic);
    surface.CalculateRoughnessA();

    // ------- Parallax Clipping -------

#if ENABLE_PARALLAX
    if(o_parallax_highlightClipping && isDisplacementClipped)
    {
        ApplyParallaxClippingHighlight(surface.albedo);
    }
#endif

    surface.alpha = (real)inAlpha * (real)inOpacityFactor;
    surface.emissiveLighting = inEmissive;
    surface.diffuseAmbientOcclusion = inDiffuseAmbientOcclusion;
    surface.specularOcclusion = inSpecularOcclusion;
    surface.opacityAffectsSpecularFactor = o_opacity_affects_specular_factor;

    // ------- Clearcoat -------

#if ENABLE_CLEAR_COAT
    if(o_clearCoat_enabled)
    {
        surface.clearCoat.factor = inClearCoatFactor;
        surface.clearCoat.roughness = max(inClearCoatRoughness, 1e-3);

        // Flip normal if back face is rendered   
        surface.clearCoat.normal = normalize(o_clearCoat_normal_override_enabled ? GetWorldSpaceNormal((real2)inClearCoatNormal, normalWS, tangents[0], bitangents[0]) : normalWS);
        surface.clearCoat.normal *= real(mad(isFrontFace, 2.0, -1.0));

        ApplyClearCoatToSpecularF0(surface.specularF0, surface.clearCoat.factor);
    }
#endif

    return surface;
}

Surface EvaluateSurface_spraying(VsOutput IN, PixelGeometryData geoData)
{
    return EvaluateSurface_spraying(
        IN,
        geoData.positionWS,
        geoData.vertexNormal,
        geoData.tangents,
        geoData.bitangents,
        geoData.uvs,
        geoData.isFrontFace,
        geoData.isDisplacementClipped);
}
