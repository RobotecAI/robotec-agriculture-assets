/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#pragma once

#ifndef ENABLE_TRANSMISSION
#define ENABLE_TRANSMISSION 0
#endif

#ifndef ENABLE_PARALLAX
// Disabled until parallax depth functions can be rewritten to not pass in the heightmap or sampler from the material SRG
#define ENABLE_PARALLAX 0
#endif

#ifndef UvSetCount
#define UvSetCount 2
#endif

#include <Atom/Features/ShaderQualityOptions.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/RPI/TangentSpace.azsli>
#include <Atom/Feature/Common/Assets/Shaders/Materials/MaterialFunctions/EvaluateTangentFrame.azsli>

#if ENABLE_PARALLAX
#include <Atom/Feature/Common/Assets/Shaders/Materials/MaterialFunctions/StandardGetAlphaAndClip.azsli>
#include <Atom/Feature/Common/Assets/Shaders/Materials/MaterialFunctions/ParallaxDepth.azsli>
COMMON_OPTIONS_PARALLAX()
#endif

option bool o_normal_override_enabled = false;
option bool o_opacity_affects_specular_factor = true;
option bool o_clearCoat_enabled = false;
option bool o_clearCoat_normal_override_enabled = false;

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    // m_placeHolder keeps MaterialSrg from being compiled out, causing SRG mismatches while assets are processing when iterating on graphs
    bool m_placeHolder;

    // O3DE_GENERATED_MATERIAL_SRG_BEGIN
float node33_float_input_inValue;

float node36_float_input_inValue;

float node32_float_input_inValue;

float node25_float_input_inValue;

Texture2D node22_sample_texture_2d_inValue;

Sampler node22_sample_texture_2d_inSampler
{
MaxAnisotropy = 16;
MinFilter = Linear;
MagFilter = Linear;
MipFilter = Linear;
ReductionType = Filter;
AddressU = Wrap;
AddressV = Wrap;
AddressW = Wrap;
MinLOD = 0.000000;
MaxLOD = 15.000000;
MipLODBias = 0.000000;
BorderColor = TransparentBlack;
};

Texture2D node28_sample_texture_2d_inValue;

Sampler node28_sample_texture_2d_inSampler
{
MaxAnisotropy = 16;
MinFilter = Linear;
MagFilter = Linear;
MipFilter = Linear;
ReductionType = Filter;
AddressU = Wrap;
AddressV = Wrap;
AddressW = Wrap;
MinLOD = 0.000000;
MaxLOD = 15.000000;
MipLODBias = 0.000000;
BorderColor = TransparentBlack;
};

    // O3DE_GENERATED_MATERIAL_SRG_END
}
 
// O3DE_GENERATED_INCLUDES_BEGIN
// O3DE_GENERATED_INCLUDES_END

// O3DE_GENERATED_CLASSES_BEGIN
// O3DE_GENERATED_CLASSES_END
 
// O3DE_GENERATED_FUNCTIONS_BEGIN
// O3DE_GENERATED_FUNCTIONS_END


#if ENABLE_PARALLAX
// Callback function for ParallaxMapping.azsli
DepthResult GetDepth(float2 uv, float2 uv_ddx, float2 uv_ddy)
{
    return SampleDepthFromHeightmap(MaterialSrg::m_heightmap, MaterialSrg::m_sampler, uv, uv_ddx, uv_ddy);
}

bool ShouldHandleParallax()
{
    // Parallax mapping's non uniform uv transformations break screen space subsurface scattering, disable it when subsurface scattering is enabled.
    return !o_enableSubsurfaceScattering && o_parallax_feature_enabled && o_useHeightmap;
}

bool ShouldHandleParallaxInDepthShaders()
{
    // The depth pass shaders need to calculate parallax when the result could affect the depth buffer, or when
    // parallax could affect texel clipping.
    return ShouldHandleParallax() && (o_parallax_enablePixelDepthOffset || o_opacity_mode == OpacityMode::Cutout);
}
#endif

bool NeedsTangentFrame()
{
    return true;
}

#if MATERIALPIPELINE_SHADER_HAS_PIXEL_STAGE

#include <Atom/Feature/Common/Assets/Shaders/Materials/BasePBR/BasePBR_VertexData.azsli>
#include "spraying_VertexEval.azsli"

#include <Atom/Feature/Common/Assets/Shaders/Materials/StandardPBR/StandardPBR_PixelGeometryData.azsli>
#include "spraying_PixelGeometryEval.azsli"

#include <Atom/Feature/Common/Assets/Shaders/Materials/StandardPBR/StandardPBR_SurfaceData.azsli>
#include "spraying_SurfaceEval.azsli"

#elif MATERIALPIPELINE_SHADER_HAS_GEOMETRIC_PIXEL_STAGE
    
#include <Atom/Feature/Common/Assets/Shaders/Materials/BasePBR/BasePBR_VertexData.azsli>
#include "spraying_VertexEval.azsli"

#include <Atom/Feature/Common/Assets/Shaders/Materials/StandardPBR/StandardPBR_PixelGeometryData.azsli>
#include "spraying_PixelGeometryEval.azsli"
    
void EvaluateSurface(VsOutput IN, PixelGeometryData geoData)
{
    const float3 bitangent = cross((float3)IN.normal, (float3)IN.tangent);
    const float3 O3DE_MC_POSITION = (float3)IN.position;
    const float3 O3DE_MC_NORMAL = (float3)IN.normal;
    const float3 O3DE_MC_TANGENT = (float3)IN.tangent;
    const float3 O3DE_MC_BITANGENT = (float3)bitangent;
    const float3 O3DE_MC_POSITION_WS = geoData.positionWS;
    const float3 O3DE_MC_NORMAL_WS = geoData.vertexNormal;
    const float3 O3DE_MC_TANGENT_WS = geoData.tangents[0];
    const float3 O3DE_MC_BITANGENT_WS = geoData.bitangents[0];
    #define O3DE_MC_UV(index) geoData.uvs[clamp(index, 0, UvSetCount-1)];

    // m_placeHolder keeps MaterialSrg from being compiled out when iterating on graphs
    const bool placeHolder = MaterialSrg::m_placeHolder;

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inAlpha, inOpacityFactor
float node17_time_outTime = SceneSrg::m_time;
float node25_float_input_outValue = MaterialSrg::node25_float_input_inValue;
float node33_float_input_outValue = MaterialSrg::node33_float_input_inValue;
uint node21_uv_inIndex = 0;
float2 node21_uv_outUV = O3DE_MC_UV(node21_uv_inIndex);
float node21_uv_outU = node21_uv_outUV.x;
float node21_uv_outV = node21_uv_outUV.y;
float node24_multiply_inValue1 = node17_time_outTime;
float node24_multiply_inValue2 = node25_float_input_outValue;
float node24_multiply_outValue = node24_multiply_inValue1 * node24_multiply_inValue2;
float node23_add_inValue1 = node21_uv_outV;
float node23_add_inValue2 = node24_multiply_outValue;
float node23_add_outValue = node23_add_inValue1 + node23_add_inValue2;
float node20_float2_from_values_inX = node21_uv_outU;
float node20_float2_from_values_inY = node23_add_outValue;
float2 node20_float2_from_values_outValue = {(float)node20_float2_from_values_inX, (float)node20_float2_from_values_inY};
float2 node22_sample_texture_2d_inUV = node20_float2_from_values_outValue;
float4 node22_sample_texture_2d_outColor = MaterialSrg::node22_sample_texture_2d_inValue.Sample(MaterialSrg::node22_sample_texture_2d_inSampler, (float2)node22_sample_texture_2d_inUV);
float node22_sample_texture_2d_outA = node22_sample_texture_2d_outColor.a;
float node35_multiply_inValue1 = node22_sample_texture_2d_outA;
float node35_multiply_inValue2 = node33_float_input_outValue;
float node35_multiply_outValue = node35_multiply_inValue1 * node35_multiply_inValue2;
float inAlpha = node35_multiply_outValue;
float inOpacityFactor = 0.6;
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_UV

    CheckClipping((real)inAlpha, (real)inOpacityFactor);
}

#else

#include "spraying_DepthVertexData.azsli"
#include "spraying_DepthVertexEval.azsli"

#endif
